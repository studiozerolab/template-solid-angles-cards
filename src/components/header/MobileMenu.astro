---
import { mainNav } from "../../config/menus";
import site from "../../config/site";
---
<header class="sticky top-0 z-40 bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60">
  <div class="mx-auto flex max-w-7xl items-center justify-between px-4 py-3">
    <a href="#home" class="font-semibold tracking-tight">{site.name}</a>
    <button
      id="mobileMenuBtn"
      class="rounded p-2 outline-none focus-visible:ring ring-offset-2 ring-black/20"
      aria-controls="mobileDrawer"
      aria-expanded="false"
      aria-label="Open menu"
    >
      ☰
    </button>
  </div>
</header>

<!-- Drawer -->
<aside
  id="mobileDrawer"
  class="fixed inset-y-0 right-0 z-50 hidden w-80 max-w-[85%] bg-white shadow-xl"
>
  <div class="flex items-center justify-between px-4 py-3 border-b">
    <span class="font-semibold">Menu</span>
    <button
      id="mobileCloseBtn"
      class="rounded p-2 outline-none focus-visible:ring ring-offset-2 ring-black/20"
      aria-label="Close menu"
    >
      ✕
    </button>
  </div>
  <nav class="p-2">
    <ul class="[&>li]:border-b [&>li]:border-black/5">
      {mainNav.map((item) => (
        <li>
          <a
            href={item.href}
            class="block px-4 py-3 focus:outline-none focus-visible:ring ring-offset-2 ring-black/20"
          >
            {item.label}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</aside>
<div id="mobileBackdrop" class="fixed inset-0 z-40 hidden bg-black/40"></div>

<script>
  const btn = document.getElementById('mobileMenuBtn');
  const drawer = document.getElementById('mobileDrawer');
  const closeBtn = document.getElementById('mobileCloseBtn');
  const backdrop = document.getElementById('mobileBackdrop');
  let lastFocused = null;

  function open() {
    lastFocused = document.activeElement;
    drawer?.classList.remove('hidden');
    backdrop?.classList.remove('hidden');
    document.documentElement.style.overflow = 'hidden';
    btn?.setAttribute('aria-expanded', 'true');
    const firstLink = drawer?.querySelector('a, button, [tabindex]:not([tabindex="-1"])');
    (firstLink as HTMLElement | null)?.focus?.();
  }

  function close() {
    drawer?.classList.add('hidden');
    backdrop?.classList.add('hidden');
    document.documentElement.style.overflow = '';
    btn?.setAttribute('aria-expanded', 'false');
    (lastFocused as HTMLElement | null)?.focus?.();
  }

  function onKeydown(e) {
    if (e.key === 'Escape') close();
    if (e.key === 'Tab' && drawer && !drawer.classList.contains('hidden')) {
      const focusables = Array.from(
        drawer.querySelectorAll('a, button, [tabindex]:not([tabindex="-1"])')
      ) as HTMLElement[];
      const first = focusables[0];
      const last = focusables[focusables.length - 1];
      if (e.shiftKey && document.activeElement === first) {
        e.preventDefault();
        last.focus();
      } else if (!e.shiftKey && document.activeElement === last) {
        e.preventDefault();
        first.focus();
      }
    }
  }

  // Close when clicking backdrop
  backdrop?.addEventListener('click', close);

  // Close when clicking any link in the drawer
  drawer?.addEventListener('click', (e) => {
    const linkEl = (e.target as HTMLElement).closest('a[href]');
    if (linkEl) close();
  });

  btn?.addEventListener('click', open);
  closeBtn?.addEventListener('click', close);
  document.addEventListener('keydown', onKeydown);
</script>
